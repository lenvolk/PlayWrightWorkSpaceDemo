# Azure Playwright Demo - Interactive Setup (Simplified)
# This script helps configure your Azure environment for the demo

param([switch]$SkipAzLogin)

# Color output function
function Write-ColorText {
    param([string]$Text, [string]$Type = "Info")
    
    switch ($Type) {
        "Success" { Write-Host $Text -ForegroundColor Green }
        "Error" { Write-Host $Text -ForegroundColor Red }
        "Warning" { Write-Host $Text -ForegroundColor Yellow }
        "Prompt" { Write-Host $Text -ForegroundColor Cyan }
        default { Write-Host $Text -ForegroundColor White }
    }
}

# Main setup function
function Start-InteractiveSetup {
    Write-ColorText "üöÄ Azure Playwright Demo - Interactive Setup" "Success"
    Write-ColorText "=============================================" "Info"
    
    # Check Azure CLI
    if (-not (Get-Command az -ErrorAction SilentlyContinue)) {
        Write-ColorText "‚ùå Azure CLI not found. Please install Azure CLI first." "Error"
        return
    }
    
    # Azure login check
    if (-not $SkipAzLogin) {
        Write-ColorText "üîê Checking Azure authentication..." "Info"
        $currentAccount = az account show 2>$null
        if (-not $currentAccount) {
            Write-ColorText "Please login to Azure..." "Prompt"
            az login
        }
    }
    
    # Get subscriptions
    Write-ColorText "üìã Getting available subscriptions..." "Info"
    $subscriptions = az account list --query '[].{Name:name, Id:id, IsDefault:isDefault}' -o json | ConvertFrom-Json
    
    if (-not $subscriptions) {
        Write-ColorText "‚ùå No subscriptions found." "Error"
        return
    }
    
    # Select subscription
    Write-ColorText "`nüìã Available Azure Subscriptions:" "Prompt"
    for ($i = 0; $i -lt $subscriptions.Length; $i++) {
        $default = if ($subscriptions[$i].IsDefault) { " (Current)" } else { "" }
        Write-Host "  $($i + 1). $($subscriptions[$i].Name)$default" -ForegroundColor White
    }
    
    $subChoice = Read-Host "`nSelect subscription (1-$($subscriptions.Length))"
    $selectedSub = $subscriptions[$subChoice - 1]
    
    if ($selectedSub) {
        az account set --subscription $selectedSub.Id
        Write-ColorText "‚úÖ Selected subscription: $($selectedSub.Name)" "Success"
    }
    
    # Get resource groups
    Write-ColorText "`nüìÅ Getting resource groups..." "Info"
    $resourceGroups = az group list --query '[].{Name:name, Location:location}' -o json | ConvertFrom-Json
    
    Write-ColorText "`nüìÅ Available Resource Groups:" "Prompt"
    Write-Host "  0. Create new resource group" -ForegroundColor Yellow
    for ($i = 0; $i -lt $resourceGroups.Length; $i++) {
        Write-Host "  $($i + 1). $($resourceGroups[$i].Name) ($($resourceGroups[$i].Location))" -ForegroundColor White
    }
    
    $rgChoice = Read-Host "`nSelect resource group (0-$($resourceGroups.Length))"
    
    if ($rgChoice -eq "0") {
        $rgName = Read-Host "Enter new resource group name"
        $location = Read-Host "Enter location (e.g. eastus)"
        az group create --name $rgName --location $location
        Write-ColorText "‚úÖ Created resource group: $rgName" "Success"
    } else {
        $rgName = $resourceGroups[$rgChoice - 1].Name
        Write-ColorText "‚úÖ Selected resource group: $rgName" "Success"
    }
    
    # Create .env file
    Write-ColorText "`nüîß Creating configuration files..." "Info"
    
    $envContent = @"
# Azure Configuration - Generated by Interactive Setup
AZURE_SUBSCRIPTION_ID=$($selectedSub.Id)
AZURE_RESOURCE_GROUP=$rgName

# Playwright Workspace Configuration
PLAYWRIGHT_SERVICE_URL=https://eastus.api.playwright.microsoft.com
PLAYWRIGHT_WORKSPACE_NAME=demo-workspace

# Azure Load Testing Configuration
AZURE_LOAD_TEST_RESOURCE=demo-load-test

# Azure Authentication (configure as needed)
# AZURE_TENANT_ID=your-tenant-id
# AZURE_CLIENT_ID=your-client-id
# AZURE_CLIENT_SECRET=your-client-secret
"@
    
    Set-Content -Path ".env" -Value $envContent
    Write-ColorText "‚úÖ Created .env file with your configuration" "Success"
    
    # Update MCP configuration
    $mcpConfigContent = @"
{
  "mcpServers": {
    "azure-mcp": {
      "command": "npx",
      "args": ["@azure/mcp-server@latest"],
      "env": {
        "AZURE_SUBSCRIPTION_ID": "$($selectedSub.Id)",
        "AZURE_RESOURCE_GROUP": "$rgName"
      }
    },
    "playwright-mcp": {
      "command": "npx",
      "args": ["@playwright/mcp@latest"],
      "env": {
        "PLAYWRIGHT_SERVICE_URL": "https://eastus.api.playwright.microsoft.com"
      }
    }
  }
}
"@
    
    Set-Content -Path "mcp/mcp-config.json" -Value $mcpConfigContent
    Write-ColorText "‚úÖ Updated MCP configuration" "Success"
    
    Write-ColorText "`nüéâ Setup completed successfully!" "Success"
    Write-ColorText "Next steps:" "Info"
    Write-ColorText "  1. Run: npm install" "Info"
    Write-ColorText "  2. Run: npm run demo" "Info"
    Write-ColorText "  3. Or run: npm run test" "Info"
}

# Run the setup
Start-InteractiveSetup
